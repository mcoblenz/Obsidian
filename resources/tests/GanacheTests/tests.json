{
    "defaults": {
        "gas": 30000000000,
        "gasprice": "0x9184e72a000",
        "startingeth": 500000000,
        "numaccts": 1,
        "trans": "main",
        "args": [],
        "types": []
    },
    "tests": [
        {
            "file": "AssignLocalAdd.obs",
            "expected": "17",
            "trans":"main",
            "shows_that_we_support": "assignment to local variables of simple compound expressions"
        },
        {
            "file": "BoolLiteral.obs",
            "expected": "0",
            "shows_that_we_support": "both boolean literals"
        },
        {
            "file": "CombinedBasics.obs",
            "expected": "24",
            "shows_that_we_support": "compound uses of the basic language features"
        },
        {
            "file": "CombinedBasicsRet.obs",
            "expected": "24",
            "shows_that_we_support": "compound uses of the basic language features and returning expressions"
        },
        {
            "file": "EmptyContract.obs",
            "expected": null,
            "shows_that_we_support": "the empty contract"
        },
        {
            "file": "If.obs",
            "expected": "1",
            "shows_that_we_support": "simple if statements on literals"
        },
        {
            "file": "IfThenElse.obs",
            "expected": "90",
            "shows_that_we_support": "simple if-then-else statements on literals"
        },
        {
            "file": "IntConst.obs",
            "expected": "12",
            "shows_that_we_support": "assignment to local variables of integer literals"
        },
        {
            "file": "MultiLineIfRet.obs",
            "expected": "15",
            "shows_that_we_support": "compound uses of the basic language features with multiple possible return points"
        },
        {
            "file": "MultiLineIfRetSm.obs",
            "expected": "24",
            "shows_that_we_support": "compound uses of the basic language features with multiple possible return points, small enough to avoid needing the optimizer for stack variables"
        },
        {
            "file": "PrimOpsAdd.obs",
            "trans" : "primopsadd",
            "expected": "13",
            "shows_that_we_support": "the primitive addition operation"
        },
        {
            "file": "PrimOpsAnd.obs",
            "trans" : "primopsand",
            "expected": "0",
            "shows_that_we_support": "the primitive and operation"
        },
        {
            "file": "PrimOpsDiv.obs",
            "trans" : "primopsdiv",
            "expected": "2",
            "shows_that_we_support": "the primitive division operation"
        },
        {
            "file": "PrimOpsEq.obs",
            "trans" : "primopseq",
            "expected": "0",
            "shows_that_we_support": "the primitive equals operation"
        },
        {
            "file": "PrimOpsGreater.obs",
            "trans" : "primopsgreater",
            "expected": "0",
            "shows_that_we_support": "the primitive greater than operation"
        },
        {
            "file": "PrimOpsGreaterEq.obs",
            "trans" : "primopsgreatereq",
            "expected": "1",
            "shows_that_we_support": "the primitive greater than or equal to operation"
        },
        {
            "file": "PrimOpsLess.obs",
            "trans" : "primopsless",
            "expected": "1",
            "shows_that_we_support": "the primitive less than operation"
        },
        {
            "file": "PrimOpsLessEq.obs",
            "trans" : "primopslesseq",
            "expected": "1",
            "shows_that_we_support": "the primitive less than or equal to operation"
        },
        {
            "file": "PrimOpsMod.obs",
            "trans" : "primopsmod",
            "expected": "5",
            "shows_that_we_support": "the primitive modulus operation"
        },
        {
            "file": "PrimOpsMul.obs",
            "trans" : "primopsmul",
            "expected": "20",
            "shows_that_we_support": "the primitive multiplication operation"
        },
        {
            "file": "PrimOpsNEq.obs",
            "trans" : "primopsneq",
            "expected": "1",
            "shows_that_we_support": "the primitive not equal operation"
        },
        {
            "file": "PrimOpsNeg.obs",
            "trans" : "primopsneg",
            "expected": "-20",
            "shows_that_we_support": "the primitive negation operation"
        },
        {
            "file": "PrimOpsNotFalse.obs",
            "trans" : "primopsnotfalse",
            "expected": "1",
            "shows_that_we_support": "the primitive not operation on false"
        },
        {
            "file": "PrimOpsNotTrue.obs",
            "trans" : "primopsnottrue",
            "expected": "0",
            "shows_that_we_support": "the primitive not operation on true"
        },
        {
            "file": "PrimOpsOr.obs",
            "trans" : "primopsor",
            "expected": "1",
            "shows_that_we_support": "the primitive or operation"
        },
        {
            "file": "PrimOpsSubNeg.obs",
            "trans" : "primopssubneg",
            "expected": "-15",
            "shows_that_we_support": "the primitive subtraction operation when the answer is negative"
        },
        {
            "file": "PrimOpsSubPos.obs",
            "trans" : "primopssubpos",
            "expected": "15",
            "shows_that_we_support": "the primitive subtraction operation when the answer is positive"
        },
        {
            "file": "Return.obs",
            "expected": "8",
            "shows_that_we_support": "returning compound expressions"
        },
        {
            "file": "Return2.obs",
            "expected": "8",
            "trans": "f",
            "shows_that_we_support": "returning and functions called for effect only"
        },
        {
            "file": "ReturnAdd.obs",
            "expected": "16",
            "shows_that_we_support": ""
        },
        {
            "file": "SG.obs",
            "expected": "1800",
            "shows_that_we_support": "returning compound expressions that are a little more complex"
        },
        {
            "file": "SGTwoContainers.obs",
            "expected": "3600",
            "shows_that_we_support": "setting and getting with two instances of the container object"
        },
        {
            "file": "SetGetConstructorArgs.obs",
            "expected": "12",
            "shows_that_we_support": "setting and getting where the container object has a constructor that takes arguments"
        },
        {
            "file": "SetGetConstructorNoArgs.obs",
            "expected": "12",
            "shows_that_we_support": "setting and getting where the container object has a constructor that does not take arguments"
        },
        {
            "file": "SetGetConstructorNoArgsNoSet.obs",
            "expected": "0",
            "shows_that_we_support": "setting and getting where the container object has a constructor that does not take arguments and set never gets called"
        },
        {
            "file": "SetGetMainArgs1.obs",
            "args": [3],
            "types": ["int256"],
            "expected": "5",
            "shows_that_we_support": "setting and getting where the argument to set comes from the client via ganache with one argument"
        },
        {
            "file": "SetGetMainArgs3.obs",
            "args": [3,2,1],
            "types": ["int256","int256","int256"],
            "expected": "8",
            "shows_that_we_support": "setting and getting where the argument to set comes from the client via ganache with three arguments"
        },
        {
            "file": "SetGetNoArgsNoConstruct.obs",
            "expected": "10",
            "shows_that_we_support": "setting and getting where the container object has no constructor and two sets that modify the same field"
        },
        {
            "file": "SetGetNoArgsNoConstructNoInit.obs",
            "expected": "5",
            "shows_that_we_support": "a very simple setting and getting where the container object has no constructor and set doesn't take arguments"
        },
        {
            "file": "SetGetPointer.obs",
            "expected": "1800",
            "shows_that_we_support": "setting and getting where the container object is stored in a pointer as a field in the main object"
        },
        {
            "file": "SetGetTwoConstructors.obs",
            "expected": "15",
            "shows_that_we_support": "setting and getting where the container object has multiple constructors with different signatures"
        },
        {
            "file": "SetGetWithArgs.obs",
            "expected": "5",
            "shows_that_we_support": "setting and getting without a constructor but where the container object's set takes arguments"
        },
        {
            "file": "SimpleCall.obs",
            "expected": "4",
            "shows_that_we_support": "calling a transaction and setting a variable as a result"
        },
        {
            "file": "SetGetNestedPointerPassThrough.obs",
            "expected": "5",
            "shows_that_we_support": "contracts with fields that refer to other contracts when the wrapper is a simple pass through"
        },
        {
            "file": "SetGetNestedPointerArg.obs",
            "expected": "5",
            "shows_that_we_support": "contracts with fields that refer to other contracts that they take as arguments"
        },
        {
            "file": "SetGetLogs.obs",
            "expected": "15",
            "trans" : "main_sgl",
            "shows_that_we_support": "simple set-get with tracers that emit values to the logs. this shows that the harness can read logs; at the moment the tracers here do not emit any"
        },
        {
            "file": "SetGetConstructorField.obs",
            "expected": "12",
            "trans" : "main",
            "logged" : [0,0],
            "shows_that_we_support": "set-get with a field so that the emitted tracer is not trivial, and that uses the constructor for that field "
        }
    ]
}
