asset contract NodeMaybe {
    state NodeNone {}
    state NodeSome {
        IntNode@Shared node;
    }

    NodeMaybe@NodeSome(IntNode@Shared node) {
        ->NodeSome(node = node);
    }

    NodeMaybe@NodeNone() {
        ->NodeNone;
    }


    transaction getNode(NodeMaybe@NodeSome this) returns IntNode@Unowned
    {
        return node;
    }

    transaction getValue(NodeMaybe@NodeSome this) returns int {
        return node.getValue();
    }
}


asset contract IntNode {
    int elem;
    NodeMaybe@Owned next;

    IntNode@Owned(int elem, NodeMaybe@Owned next) {
        this.elem = elem;
        this.next = next;
    }

    transaction length(IntNode@Unowned this) returns int {
        int i = 1;
        switch next {
            case NodeSome {
                i = i + next.getNode().length();
            }
        }
        return i;
    }

    transaction append(int new_elem) {
        switch next {
            case NodeSome {
                next.getNode().append(new_elem);
            }

            case NodeNone {
                next = new NodeMaybe(new IntNode(new_elem, new NodeMaybe()));
            }
        }
    }
}

asset contract IntList {

    NodeMaybe first;

    IntList() {
        first = new NodeMaybe();
    }

    transaction length() returns int {
        int i = 0;
        switch first {
            case NodeSome {
                i = first.getNode().length();
            }
        }
        return i;
    }

    transaction append(int elem) {
        switch first {
            case NodeSome {
                first.getNode().append(elem);
            }
            case NodeNone {
                first = new NodeMaybe(new IntNode(elem, new NodeMaybe()));
            }
        }
    }


    /* assume that elements appear at most once */
    transaction delete(int target) {
	return; // TODO
    }
}


main contract UsesLinkedList {

    IntList ll;

    transaction main() returns int {
        ll = new IntList();
        ll.append(1);
	ll.append(2);
	ll.append(3);
	ll.append(4);
	ll.append(5);
	ll.delete(3);
	return(ll.length());
    }
}
