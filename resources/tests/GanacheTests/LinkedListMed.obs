contract IntLLEnd{
    int payload;

    IntLLEnd@Owned(int p){
        payload = p;
    }

    transaction payload() returns int {
        return payload;
    }
}

contract IntLL1{
    int payload;
    IntLLEnd@Unowned next;

    IntLL1@Owned(int p, IntLLEnd n){
        payload = p;
        next = n;
    }
}

contract IntLL2{
    int payload;
    IntLL1@Unowned next;

    IntLL2@Owned(int p, IntLL1 n){
        payload = p;
        next = n;
    }
}

contract IntLL3{
    int payload;
    IntLL2@Unowned next;

    IntLL3@Owned(int p, IntLL2 n){
        payload = p;
        next = n;
    }
}

contract IntLL4{
    int payload;
    IntLL3@Unowned next;

    IntLL4@Owned(int p, IntLL3 n){
        payload = p;
        next = n;
    }
}
contract IntLL5{
    int payload;
    IntLL4@Unowned next;

    IntLL5@Owned(int p, IntLL4 n){
        payload = p;
        next = n;
    }
}
contract IntLL6{
    int payload;
    IntLL5@Unowned next;

    IntLL6@Owned(int p, IntLL5 n){
        payload = p;
        next = n;
    }
}
contract IntLL7 {
    int payload;
    IntLL6@Unowned next;

    IntLL7@Owned(int p, IntLL6 n){
        payload = p;
        next = n;
    }
}

main contract LinkedListMed {
    transaction main() returns int {
        IntLLEnd tail = new IntLLEnd(1);
        IntLL1 e1 = new IntLL1(2, tail);
        IntLL2 e2 = new IntLL2(4, e1);
        IntLL3 e3 = new IntLL3(8, e2);
        IntLL4 e4 = new IntLL4(16, e3);
        IntLL5 e5 = new IntLL5(32, e4);
        IntLL6 e6 = new IntLL6(64, e5);
        IntLL7 e7 = new IntLL7(128, e6);
        e7.release();
        return 0;
    }
}
