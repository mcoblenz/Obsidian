main contract C1 {

    // error: constructor for 'C1' ends in S2, S3 instead of S1, S2
    C1(bool b) ends in S1, S2 {
        if(b) {
            ->S2;
        } else {
            ->S3;
        }
    }

    // error: 'OtherState' is not a valid state
    transaction t1() available in S2
                    ends in S2, OtherState {
        int x = 1;
    }

    // error: if we access t2 from S2, it will not end in S1, S3
    transaction t2() available in S1, S2
                     ends in S1, S3 {
        int x = 1;
    }


    state S1{}
    state S2{}
    state S3{}
}

contract C2 {

    // error: C2 ends in S1, S2 but must end in S1
    C2(bool b) ends in S1 {
        if(b) {
            ->S1;
        } else {
            ->S2;
        }
    }

    state S1 {}
    state S2 {}
}

contract C3 {
  state S1 {}
  state S2 {
    int f2;
  }


  C3() {
    ->S1;
  }

  transaction toUnknownState(int x) available in S1 ends in S1, S2 {
    if (x > 3) {
      ->S2({f2 = 0});
    }
    else {
      ->S1;
    }
    
    // Error: f2 may not be available.
    f2 = 3;
  }
}
