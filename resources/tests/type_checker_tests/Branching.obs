/* This test checks various aspects of type-checking related to branching that
 * is, if/else statements */

contract Sh/*ared*/ {
}

resource contract Ow/*ned*/ {

}

main contract C {
    transaction t() {
        Ow@Owned o1 = new Ow();
        Sh@Shared s1 = new Sh();
        // [o1] is incompatible after the branch because it's used in only one
        if (true) {
            Ow@Owned o2 = o1;
            Sh@Shared s2 = s1;
        } else {
            int x = 5;
        }
    }

    transaction t2() {
        Ow@Owned o1 = new Ow();
        // shouldn't cause a merge incompatibility because of the exception
        if (true) {
            Ow@Owned o2 = o1;
        } else {
            throw;
        }
    }

    transaction t3() {
        Ow@Owned o1 = new Ow();
        if (true) {
            Ow@Owned o2 = o1;
        }
    }

    transaction t4() {
        // x must be undefined after the branch
        if (true) {
            int x = 5;
        } else {
            int x = 2;
        }
        x = 3;
    }

    transaction t5() returns int {
        if (true) {
            return 5;
        } else {
            throw;
        }
    }
}
