// This file tests ownership transfer and linearity.

main resource contract BogusMoney {
	 // Error: constructor must return an owned reference
	 BogusMoney() {
	 }
}

resource contract Money {
    owned Money() {

    }
}

resource contract Wallet {
    owned Money money;

    owned Wallet (owned Money m) {
        money <- m;
    }

    transaction loseMoney (owned Money m) {
        // Error: m is linear
    }

    transaction stealMoney (Money m) {
        // Error: m is unowned, so it cannot be assigned to owned money
        money = m;
    }

    transaction returnMoney (owned Money m) returns owned Money {
    	return <-m;
    }

    transaction failToReturnMoney (Money m) returns owned Money {
        // Error: can't return unowned m when owned Money is required
        return m;
    }
}

contract BadWallet {
    // Error: can't own a resource in a non-resource contract.
    owned Money money;
}

contract Disowning {
	 transaction bogusDiscardMoney (Money m) {
	 	     // Error: m is unowned
	 	     disown m;
	 }

	 transaction discardMoney (owned Money m) {
     	 	 disown m;

     	 	 // Error: m is unowned
     	 	 discardMoney(m);

             // Error: m is unowned. Want to make sure we can't consume m twice.
     	 	 owned Money bad = m;
     }

     transaction getMoney() returns owned Money {
        return new Money();
     }

     transaction discardMoneyCall () {
        disown getMoney();
        Money m = disown getMoney(); // disown is an expression, not just a statement
     }
}

contract LosingResource {
    transaction bogus (owned Money m) returns Money {
        // Error: losing m.
        return m;
    }
}