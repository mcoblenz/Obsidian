// checks that assignments work as expected

resource contract C_Owned {
    int f1;
}

main contract C_Shared {
    int f1;

    C_Shared@S()  {
        ->S(f2 = f1);
    }

    state S { int f2; }
    state T {}
}

contract C {
    int i;

    transaction t(int a) {
        a = 3;
        int b = 2;
        b = 1;
        // should fail: bool is not int
        b = true;
        C_Shared@Shared c = new C_Shared();
        // should fail: C_Owned is not C_Shared
        c = new C_Owned();
        c.f1 = 3;
        // should fail: this type isn't guaranteed to have this field
        c.f2 = 2;
        // should fail: this field doesn't exist
        c.f3 = 1;

        C_Shared@S cs = new C_Shared();
        cs.f2 = 2;
        i = 3;
        this.i = 3;
        // should fail: variable j undefined
        j = 2;
        // should fail: assignment to non-assignable expression
        3 = 5;

	// should fail: 2 is not a reference type and cannot have fields.
	2.f = 3;
    }
}
