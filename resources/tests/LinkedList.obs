resource contract NodeMaybe {
    state NodeNone {}
    state NodeSome {
        IntNode@Shared node;
    }

    NodeMaybe@NodeSome(IntNode@Shared node) {
        ->NodeSome(node = node);
    }

    NodeMaybe@NodeNone() {
        ->NodeNone;
    }


    transaction getNode(NodeMaybe@NodeSome this) returns IntNode@Unowned
    {
        return node;
    }

    transaction getValue(NodeMaybe@NodeSome this) returns int {
        return node.getValue();
    }
}


resource contract IntNode {
    int elem;
    NodeMaybe@Owned next;

    IntNode@Owned(int elem, NodeMaybe@Owned next) {
        this.elem = elem;
        this.next = next;
    }

    transaction getValue(IntNode this) returns int {
        return elem;
    }

    transaction length(IntNode@Unowned this) returns int {
        int i = 1;
        switch next {
            case NodeSome {
                i = i + next.getNode().length();
            }
        }
        return i;
    }

    transaction nth(int n) returns NodeMaybe@Unowned {
        if (n == 0) {
            return new NodeMaybe(this);
        }

        NodeMaybe@Unowned ret;
        switch next {
            case NodeSome {
                ret = next.getNode().nth(n - 1);
            }
            case NodeNone {
                ret = new NodeMaybe();
            }
        }

        return ret;
    }

    transaction append(int new_elem) {
        switch next {
            case NodeSome {
                next.getNode().append(new_elem);
            }

            case NodeNone {
                next = new NodeMaybe(new IntNode(new_elem, new NodeMaybe()));
            }
        }
    }
}

/*
resource contract IntList {

    NodeMaybe first;

    IntList() {
        first = new NodeMaybe();
    }

    transaction length() returns int {
        int i = 0;
        switch first {
            case NodeSome {
                i = first.getNode().length();
            }
        }
        return i;
    }

    // this violates linearity, obviously, but it is useful for testing
    transaction nth(int n) returns NodeMaybe {
        NodeMaybe node;
        switch first {
            case NodeSome {
                node = first.getNode().nth(n);
            }
            case NodeNone {
                node = new NodeMaybe();
            }
        }
        return node;
    }

    transaction append(int elem) {
        switch first {
            case NodeSome {
                first.getNode().append(elem);
            }
            case NodeNone {
                first = new NodeMaybe(new IntNode(elem, new NodeMaybe()));
            }
        }
    }
}

main contract UsesLinkedList {

    IntList ll;

    UsesLinkedList() {
        ll = new IntList();
    }

    transaction add(int x) returns int {
        ll.append(x);
        return x;
    }

    transaction getLength() returns int {
        return ll.length();
    }

    transaction getNth(int n, int deflt) returns int {
        if (n < 0) {
            return deflt;
        }
        NodeMaybe maybeNth = ll.nth(n);

        int i = deflt;
        switch maybeNth {
            case NodeSome {
                i = maybeNth.getValue();
            }
        }

        return i;
    }
}
*/