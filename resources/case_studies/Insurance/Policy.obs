contract Policy {
    state Offered;
    state Active;
    state Expired;
    state Claimed;

    int cost;
    int expirationTime;
    int longitude;
    int latitude;
    int radius;
    int moistureContent;

    Policy@Offered(int c,
                   int expiration,
                   int longitude,
                   int latitude,
                   int radius,
                   int moistureContent)
    {
        ->Offered(cost = c,
                  expirationTime = expiration,
                  longitude = longitude,
                  latitude = latitude,
                  radius = radius,
                  moistureContent = moistureContent);
    }

    transaction activate(Policy@Offered >> Active this) {
        ->Active;
    }

    transaction expire(Policy@Offered >> Expired this) {
        ->Expired;
    }

    transaction claim(Policy@Active >> Claimed this) {
        ->Claimed;
    }

    transaction getExpirationTime(Policy@Offered this) returns int {
        return expirationTime;
    }

    transaction getCost(Policy@Offered this) returns int {
        return cost;
    }

    // TODO: Equality on Policies
    transaction equals(Policy@Unowned this, Policy@Unowned p) returns bool {
        return true;
    }

    transaction isClaimableWithWeather(Policy@Unowned this, WeatherRecord@Unowned weather) returns bool {
        int longitudeDist = weather.getLongitude() - longitude;
        int latitudeDist = weather.getLatitude() - latitude;
        int dist = sqrt(longitudeDist * longitudeDist + latitudeDist * latitudeDist);

        return (dist < radius) && (weather.getMoisture() < moistureContent);
    }
}
