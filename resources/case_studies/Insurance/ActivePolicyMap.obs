import "PolicyRecord.obs"


// This implements a mutable linked list of Active policies.
contract ActivePolicyList {
    asset state HasNext {
        ActivePolicyList@Owned next;
    }

    asset state NoNext;
    state Empty;

    Policy@Unowned key available in HasNext, NoNext;
    PolicyRecord@Active val available in HasNext, NoNext;


    ActivePolicyList@Empty() {
        ->Empty;
    }

    transaction getKey(ActivePolicyList@HasNext this) returns Policy@Unowned {
        return key;
    }

    transaction getValue(ActivePolicyList@HasNext this) returns PolicyRecord@Unowned {
        return val;
    }

    transaction disconnectNext(ActivePolicyList@HasNext >> NoNext this) returns ActivePolicyList@Owned {
        ActivePolicyList removedNext = next;
        ->NoNext;
        return removedNext;
    }

    transaction reconnectNext(ActivePolicyList@NoNext >> HasNext this, ActivePolicyList@Owned >> Unowned newNext) {
        ->HasNext(next = newNext);
    }

    private transaction removeValue(ActivePolicyList@NoNext >> Empty this) returns PolicyRecord@Active {
        PolicyRecord valCopy = val;
        ->Empty;
        return valCopy;
    }


    transaction append(ActivePolicyList@Owned this, Policy@Unowned k, PolicyRecord@Active >> Unowned v) {
        switch this {
            case HasNext {
                next.append(k, v);
            }
            case Empty {
                ->HasNext(key = k, val = v, next = new ActivePolicyList());
            }
        }
    }



    // Removes prevNode.next, returning the PolicyRecord that was previously owned by prevNode.next.
    // Precondition: this is not the last node of the linked list.
    transaction removeNext(ActivePolicyList@HasNext this) returns PolicyRecord@Active {
        ActivePolicyList removedNode = this.next;
        [removedNode@Owned];

        switch removedNode {
            case Empty {
                revert; // this case doesn't make any sense.
            }
            case HasNext {
                this.next = removedNode.disconnectNext();
                [removedNode@NoNext];
                return removedNode.removeValue();
            }
        }
    }

    // Assumes "this" is not a match.
     transaction removeInRest(ActivePolicyList@Owned this, Policy@Unowned policy) returns PolicyRecord@Active {
          switch this {
               case Empty {
                   revert; // We didn't find the policy in the list.
               }
               case HasNext {
                   switch next {
                        case Empty {
                            revert;
                        }
                        case HasNext {
                            if(next.getKey().equals(policy)) {
                                return this.removeNext();
                            }
                            else {
                                return next.removeInRest(policy);
                            }
                        }
                   }
               }
          }
    }
}


main asset contract ActivePolicyMap {
    ActivePolicyList@Owned list;

    ActivePolicyMap@Owned() {
        list = new ActivePolicyList(); // Start with an empty list.
    }

    transaction set(ActivePolicyMap@Owned this, Policy@Unowned key, PolicyRecord@Active >> Unowned val) {
        list.append(key, val);
    }




    // remove and return value of the pair with the given policy as a key
    transaction get(ActivePolicyMap@Owned this, Policy@Unowned policy) returns PolicyRecord@Active {
        PolicyRecord removed;

        switch list {
            case Empty {
                revert; // Element not in map.
            }
            case HasNext {
                if(list.getKey().equals(policy)) {
                    ActivePolicyList secondNode = list.disconnectNext();
                    [list@NoNext];
                    removed = list.removeValue();
                    list = secondNode;
                } else {
                    removed = list.removeInRest(policy);
                }
            }
        }

        return removed;

    }


}


