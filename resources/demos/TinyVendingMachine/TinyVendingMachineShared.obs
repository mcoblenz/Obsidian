asset contract Candy {
}

asset contract Coin {
}

asset contract Coins {
    // Currently implemented as a bottomless void for convenience.

    transaction deposit(Coin @ Owned >> Unowned c) {
        disown c;
    }
}

// This vending machine sells candy in exchange for candy tokens.
main asset contract TinyVendingMachine {
    Coins @ Owned coinBin;

    state Full {
        Candy @ Owned inventory;
    }
    state Empty; // No candy if the machine is empty.

    TinyVendingMachine() {
        coinBin = new Coins(); // Start with an empty coin bin.
        ->Empty;
    }

    transaction restock(TinyVendingMachine @ Shared this,
                        Candy @ Owned >> Unowned c) {
        if (this in Empty) {
            ->Full(inventory = c);
        }
        else {
            disown c;
        }
    }

    transaction buy(TinyVendingMachine @ Shared this,
                    Coin @ Owned >> Unowned c) returns Candy @ Owned {
        coinBin.deposit(c);
        if (this in Full) {
            Candy result = inventory;
            ->Empty;
            return result;
        }
        return new Candy();
    }

    transaction withdrawCoins() returns Coins @ Owned {
        Coins result = coinBin;
        coinBin = new Coins();
        return result;
    }
}