{{! This is a template used by mustache to generate the final string of yul code. The
structures of these templates are referenced from github repo
ethereum/solidity/libsolidity/codegen/ir/IRGenerator.cpp
(https://github.com/ethereum/solidity/blob/develop/libsolidity/codegen/ir/IRGenerator.cpp)
Consulting example yul code is also helpful in understanding the template.
https://solidity.readthedocs.io/en/latest/yul.html#specification-of-yul-object
}}
object "{{creationObject}}" {
    code {
        {{! init free memory pointer, see chatper "Layout in Memory" of the Solidity doc}}
        {{memoryInit}}
        {{! protection against sending Ether }}
        {{callValueCheck}}
        {{! not impletmented by the current stage, cited from IRGenerator.cpp (link in file comment above) }}
        {{#notLibrary}}
            {{#constructorHasParams}} let {{constructorParams}} := {{copyConstructorArguments}}() {{/constructorHasParams}}
            {{implicitConstructor}}({{constructorParams}})
        {{/notLibrary}}
        {{! todo: write and call constructor }}
        {{#deploy}}
            {{call}}
        {{/deploy}}
        {{! functions related to constructor }}
        {{#deployFunctions}}
            {{code}}
        {{/deployFunctions}}
        {{defaultReturn}}
    }
    object "{{runtimeObject}}" {
        code {
            {{! init free memory pointer, see chatper "Layout in Memory" of the Solidity doc}}
            {{memoryInitRuntime}}
            {{! obtain which runtime function is called, https://solidity.readthedocs.io/en/latest/abi-spec.html#function-selector}}

            {{! todo: is 4 a magic number or should it be generated based on the object in question? check the ABI }}
            if iszero(lt(calldatasize(), 4)) {
            {
                {{#dispatch}}
                    {{! TODO 224 is a magic number offset to shift to follow the spec above; check that it's right }}
                    let selector := shr(224, calldataload(0))
                    {{dispatchCase}}
                {{/dispatch}}
            }
            if iszero(calldatasize()) {  }
            revert(0, 0)
            {{! todo: this is deadcode for at least the empty contract but gets emitted anyway; trim it down somehow? }}
            {{! these functions for memory management are produced by the solc IR backend for
                Solidity programs analagous to our test Obsidian programs.
             }}
            function abi_decode_tuple(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }
            }

            function abi_encode_tuple_to_fromStack(headStart ) -> tail {
                tail := add(headStart, 0)
            }

            function allocate_memory(size) -> memPtr {
                memPtr := allocate_unbounded()
                finalize_allocation(memPtr, size)
            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function finalize_allocation(memPtr, size) {
                let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) {  panic_error_0x41() }
                mstore(64, newFreePtr)
            }

            function panic_error_0x41() {
                mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)
                mstore(4, 0x41)
                revert(0, 0x24)
            }

            function round_up_to_mul_of_32(value) -> result {
                result := and(add(value, 31), not(31))
            }

            {{#runtimeFunctions}}
                {{code}}
            {{/runtimeFunctions}}
        }
        {{runtimeSubObjects}}
    }
    {{subObjects}}
}
}